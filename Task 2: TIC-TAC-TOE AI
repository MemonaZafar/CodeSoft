import math
import random

# Tic-Tac-Toe board
board = [" " for _ in range(9)]

# Constants for players
# 'X' represents the human player, 'O' represents the AI, and ' ' represents an empty cell.

HUMAN = "X"
AI = "O"

# Function to print the Tic-Tac-Toe board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")

# Function to check if a player has won
def check_win(board, player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                      (0, 3, 6), (1, 4, 7), (2, 5, 8),
                      (0, 4, 8), (2, 4, 6)]

    for condition in win_conditions:
        if all(board[i] == player for i in condition):
            return True
    return False

# Function to check if the board is full
def is_board_full(board):
    return " " not in board
    # Function for the AI player to make a move using Minimax with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing):
    if check_win(board, HUMAN):
        return -1
    if check_win(board, AI):
        return 1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = AI
                score = minimax(board, depth + 1, False)
                board[i] = " "
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = HUMAN
                score = minimax(board, depth + 1, True)
                board[i] = " "
                best_score = min(score, best_score)
        return best_score

# Function to find the best move for the AI player
def find_best_move(board):
    best_move = -1
    best_score = -float("inf")

    for i in range(9):
        if board[i] == " ":
            board[i] = AI
            score = minimax(board, 0, False)
            board[i] = " "
            if score > best_score:
                best_score = score
                best_move = i

    return best_move

# Main game loop
while True:
    print_board(board)
    move = input("Enter your move (0-8): ")
    
    try:
        move = int(move)
        if board[move] == " ":
            board[move] = HUMAN
        else:
            print("Invalid move. That space is already occupied.")
            continue
    except ValueError:
        print("Invalid input. Please enter a number between 0 and 8.")
        continue

    if check_win(board, HUMAN):
        print_board(board)
        print("You win!")
        break
    if is_board_full(board):
        print_board(board)
        print("It's a draw!")
        break

    ai_move = find_best_move(board)
    board[ai_move] = AI

    if check_win(board, AI):
        print_board(board)
        print("AI wins!")
        break
    if is_board_full(board):
        print_board(board)
        print("It's a draw!")
        break

